# Luxury Watch Arbitrage AI Bot Prototype (Email Alerts)

# Step 1: Setup OCI Infrastructure (OKE Kubernetes Cluster)
oci ce cluster create \
  --name WatchArbitrageCluster \
  --compartment-id <COMPARTMENT_OCID> \
  --kubernetes-version v1.29.2

# Step 2: Dockerfile for AI Bot
FROM python:3.11-slim
WORKDIR /app
COPY . /app
RUN apt-get update && apt-get install -y gcc build-essential wget \
  && pip install openai langchain selenium beautifulsoup4
CMD ["python", "watch_bot.py"]

# Step 3: watch_bot.py â€“ Web Scraping, GPT-4o Analysis & Email Notifications
import os
import openai
from langchain.llms import OpenAI
from bs4 import BeautifulSoup
from selenium import webdriver
import smtplib
from email.message import EmailMessage

# Load API Keys and Email Config from Environment Variables (via OCI Vault/K8s Secrets)
openai.api_key = os.getenv("OPENAI_API_KEY")
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
EMAIL_USER = os.getenv("EMAIL_USER")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
RECIPIENT_EMAIL = os.getenv("RECIPIENT_EMAIL")

# Scrape Listings (Chrono24 example)
def scrape_chrono24(url):
    driver = webdriver.Chrome()
    driver.get(url)
    soup = BeautifulSoup(driver.page_source, 'html.parser')
    listings = []
    for item in soup.select('.article-item-container'):
        price = item.select_one('.article-price').text.strip()
        title = item.select_one('.article-title').text.strip()
        link = item.select_one('a')['href']
        listings.append({"title": title, "price": price, "link": link})
    driver.quit()
    return listings

# GPT-4o Valuation
llm = OpenAI(model="gpt-4o")
def evaluate_listing(listing):
    prompt = f"""Analyze this luxury watch listing:
    Title: {listing['title']}
    Price: {listing['price']}

    Based on current market trends, is this watch undervalued? Answer with 'Undervalued' or 'Fairly Priced' and brief reasoning."""
    response = llm(prompt)
    return response.strip()

# Send Email Notification
def send_notification(message):
    msg = EmailMessage()
    msg["Subject"] = "ðŸš¨ Undervalued Watch Opportunity Detected"
    msg["From"] = EMAIL_USER
    msg["To"] = RECIPIENT_EMAIL
    msg.set_content(message)

    with smtplib.SMTP(EMAIL_HOST, EMAIL_PORT) as server:
        server.starttls()
        server.login(EMAIL_USER, EMAIL_PASSWORD)
        server.send_message(msg)

# Main Bot Loop
if __name__ == '__main__':
    url = "https://www.chrono24.com/rolex/daytona--mod71.htm"
    listings = scrape_chrono24(url)

    for listing in listings[:5]:  # Analyze top 5 listings
        result = evaluate_listing(listing)
        if "undervalued" in result.lower():
            message = (
                f"Title: {listing['title']}\n"
                f"Price: {listing['price']}\n"
                f"Analysis: {result}\n"
                f"Link: {listing['link']}"
            )
            send_notification(message)

# Step 4: Deploy to OKE Kubernetes
kubectl create namespace watch-bot
kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: watch-arbitrage-bot
  namespace: watch-bot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: watch-bot
  template:
    metadata:
      labels:
        app: watch-bot
    spec:
      containers:
        - name: bot
          image: <docker-repo>/watch-bot:latest
          env:
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: watch-bot-secrets
                  key: openai-api-key
            - name: EMAIL_HOST
              valueFrom:
                secretKeyRef:
                  name: watch-bot-secrets
                  key: email-host
            - name: EMAIL_PORT
              valueFrom:
                secretKeyRef:
                  name: watch-bot-secrets
                  key: email-port
            - name: EMAIL_USER
              valueFrom:
                secretKeyRef:
                  name: watch-bot-secrets
                  key: email-user
            - name: EMAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: watch-bot-secrets
                  key: email-password
            - name: RECIPIENT_EMAIL
              valueFrom:
                secretKeyRef:
                  name: watch-bot-secrets
                  key: recipient-email
EOF
